// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.18213
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace _specs.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("HBase Stargate Client")]
    public partial class HBaseStargateClientFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "HBaseStargateClient.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "HBase Stargate Client", "In order to read and write HBase data\r\nAs an application developer\r\nI want access" +
                    " to all available REST operations on HBase Stargate via a managed client API", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "server URL",
                        "content type",
                        "false row key"});
            table1.AddRow(new string[] {
                        "http://test-server:9999",
                        "text/xml",
                        "row"});
#line 7
 testRunner.Given("I have everything I need to test an HBase client in isolation, with the following" +
                    " options:", ((string)(null)), table1, "Given ");
#line 10
 testRunner.And("I have an HBase client", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create a table")]
        public virtual void CreateATable()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a table", ((string[])(null)));
#line 12
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 13
 testRunner.Given("I have set my context to a table called \"test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 14
 testRunner.And("I have added a column called \"alpha\" to my table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 15
 testRunner.When("I create the table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "method",
                        "url",
                        "table",
                        "column"});
            table2.AddRow(new string[] {
                        "POST",
                        "http://test-server:9999/test/schema",
                        "test",
                        "alpha"});
#line 16
 testRunner.Then("a REST request should have been submitted with the following values:", ((string)(null)), table2, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Write a single value")]
        [NUnit.Framework.TestCaseAttribute("1", "alpha", "", "", "PUT", "http://test-server:9999/test/1/alpha", null)]
        [NUnit.Framework.TestCaseAttribute("1", "alpha", "x", "", "PUT", "http://test-server:9999/test/1/alpha:x", null)]
        [NUnit.Framework.TestCaseAttribute("1", "alpha", "", "4", "PUT", "http://test-server:9999/test/1/alpha/4", null)]
        [NUnit.Framework.TestCaseAttribute("1", "alpha", "x", "4", "PUT", "http://test-server:9999/test/1/alpha:x/4", null)]
        public virtual void WriteASingleValue(string row, string column, string qualifier, string timestamp, string method, string url, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Write a single value", exampleTags);
#line 20
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 21
 testRunner.Given("I have set my context to a table called \"test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 22
 testRunner.And(string.Format("I have an identifier consisting of a {0}, a {1}, a {2}, and a {3}", row, column, qualifier, timestamp), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 23
 testRunner.And("I have used my table to create a cell with my identifier and the value \"hello wor" +
                    "ld\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 24
 testRunner.When("I save the cell", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 25
 testRunner.Then(string.Format("a REST request should have been submitted with the correct {0} and {1}", method, url), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 26
 testRunner.And("the REST request should have contained 1 cell", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 27
 testRunner.And("one of the cells in the REST request should have had the value \"hello world\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Write multiple values")]
        public virtual void WriteMultipleValues()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Write multiple values", ((string[])(null)));
#line 35
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 36
 testRunner.Given("I have set my context to a table called \"test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "row",
                        "column",
                        "qualifier",
                        "value"});
            table3.AddRow(new string[] {
                        "1",
                        "beta",
                        "x",
                        "hello world"});
#line 37
 testRunner.And("I have used my table to create a cell with the following values:", ((string)(null)), table3, "And ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "row",
                        "column",
                        "qualifier",
                        "value"});
            table4.AddRow(new string[] {
                        "1",
                        "beta",
                        "y",
                        "dlrow olleh"});
#line 40
 testRunner.And("I have used my table to create a cell with the following values:", ((string)(null)), table4, "And ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "row",
                        "column",
                        "qualifier",
                        "value"});
            table5.AddRow(new string[] {
                        "1",
                        "beta",
                        "z",
                        "lorum ipsum"});
#line 43
 testRunner.And("I have used my table to create a cell with the following values:", ((string)(null)), table5, "And ");
#line 46
 testRunner.When("I save the table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "method",
                        "url"});
            table6.AddRow(new string[] {
                        "POST",
                        "http://test-server:9999/test/row"});
#line 47
 testRunner.Then("a REST request should have been submitted with the following values:", ((string)(null)), table6, "Then ");
#line 50
 testRunner.And("the REST request should have contained 3 cells", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "row",
                        "column",
                        "qualifier",
                        "value"});
            table7.AddRow(new string[] {
                        "1",
                        "beta",
                        "x",
                        "hello world"});
#line 51
 testRunner.And("one of the cells in the REST request should have had the following values:", ((string)(null)), table7, "And ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "row",
                        "column",
                        "qualifier",
                        "value"});
            table8.AddRow(new string[] {
                        "1",
                        "beta",
                        "y",
                        "dlrow olleh"});
#line 54
 testRunner.And("one of the cells in the REST request should have had the following values:", ((string)(null)), table8, "And ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "row",
                        "column",
                        "qualifier",
                        "value"});
            table9.AddRow(new string[] {
                        "1",
                        "beta",
                        "z",
                        "lorum ipsum"});
#line 57
 testRunner.And("one of the cells in the REST request should have had the following values:", ((string)(null)), table9, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Read a row")]
        [NUnit.Framework.TestCaseAttribute("1", "", "", "", "GET", "http://test-server:9999/test/1", null)]
        [NUnit.Framework.TestCaseAttribute("1", "alpha", "", "", "GET", "http://test-server:9999/test/1/alpha", null)]
        [NUnit.Framework.TestCaseAttribute("1", "alpha", "x", "", "GET", "http://test-server:9999/test/1/alpha:x", null)]
        [NUnit.Framework.TestCaseAttribute("1", "alpha", "", "4", "GET", "http://test-server:9999/test/1/alpha/4", null)]
        [NUnit.Framework.TestCaseAttribute("1", "alpha", "x", "4", "GET", "http://test-server:9999/test/1/alpha:x/4", null)]
        public virtual void ReadARow(string row, string column, string qualifier, string timestamp, string method, string url, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Read a row", exampleTags);
#line 61
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 62
 testRunner.Given("I have set my context to a table called \"test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 63
 testRunner.And(string.Format("I have an identifier consisting of a {0}, a {1}, a {2}, and a {3}", row, column, qualifier, timestamp), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 64
 testRunner.When("I read a row using my identifier", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 65
 testRunner.Then(string.Format("a REST request should have been submitted with the correct {0} and {1}", method, url), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Read a cell")]
        [NUnit.Framework.TestCaseAttribute("1", "", "", "", "GET", "http://test-server:9999/test/1", null)]
        [NUnit.Framework.TestCaseAttribute("1", "alpha", "", "", "GET", "http://test-server:9999/test/1/alpha", null)]
        [NUnit.Framework.TestCaseAttribute("1", "alpha", "x", "", "GET", "http://test-server:9999/test/1/alpha:x", null)]
        [NUnit.Framework.TestCaseAttribute("1", "alpha", "", "4", "GET", "http://test-server:9999/test/1/alpha/4", null)]
        [NUnit.Framework.TestCaseAttribute("1", "alpha", "x", "4", "GET", "http://test-server:9999/test/1/alpha:x/4", null)]
        public virtual void ReadACell(string row, string column, string qualifier, string timestamp, string method, string url, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Read a cell", exampleTags);
#line 74
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 75
 testRunner.Given("I have set my context to a table called \"test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 76
 testRunner.And(string.Format("I have an identifier consisting of a {0}, a {1}, a {2}, and a {3}", row, column, qualifier, timestamp), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 77
 testRunner.When("I read a cell using my identifier", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 78
 testRunner.Then(string.Format("a REST request should have been submitted with the correct {0} and {1}", method, url), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create a scanner")]
        public virtual void CreateAScanner()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a scanner", ((string[])(null)));
#line 87
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 88
 testRunner.Given("I have set my context to a table called \"test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 89
 testRunner.And("I have set my context to a new scanner", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 90
 testRunner.When("I create the scanner", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "method",
                        "url"});
            table10.AddRow(new string[] {
                        "POST",
                        "http://test-server:9999/test/scanner"});
#line 91
 testRunner.Then("a REST request should have been submitted with the following values:", ((string)(null)), table10, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Read a result from a scanner")]
        public virtual void ReadAResultFromAScanner()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Read a result from a scanner", ((string[])(null)));
#line 95
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 96
 testRunner.Given("I have set my context to a table called \"test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 97
 testRunner.And("I have set my context to a new scanner", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 98
 testRunner.When("I read a result from the scanner", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "method",
                        "url"});
            table11.AddRow(new string[] {
                        "GET",
                        "http://test-server:9999/test/scanner/abc123"});
#line 99
 testRunner.Then("a REST request should have been submitted with the following values:", ((string)(null)), table11, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Delete a scanner")]
        public virtual void DeleteAScanner()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete a scanner", ((string[])(null)));
#line 103
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 104
 testRunner.Given("I have set my context to a table called \"test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 105
 testRunner.And("I have set my context to a new scanner", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 106
 testRunner.When("I delete the scanner", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "method",
                        "url"});
            table12.AddRow(new string[] {
                        "DELETE",
                        "http://test-server:9999/test/scanner/abc123"});
#line 107
 testRunner.Then("a REST request should have been submitted with the following values:", ((string)(null)), table12, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Enumerate all tables")]
        public virtual void EnumerateAllTables()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Enumerate all tables", ((string[])(null)));
#line 111
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 112
 testRunner.When("I read the names of all tables", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "method",
                        "url"});
            table13.AddRow(new string[] {
                        "GET",
                        "http://test-server:9999"});
#line 113
 testRunner.Then("a REST request should have been submitted with the following values:", ((string)(null)), table13, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Delete a row, columm, or cell")]
        [NUnit.Framework.TestCaseAttribute("1", "", "", "", "DELETE", "http://test-server:9999/test/1", null)]
        [NUnit.Framework.TestCaseAttribute("1", "alpha", "", "", "DELETE", "http://test-server:9999/test/1/alpha", null)]
        [NUnit.Framework.TestCaseAttribute("1", "alpha", "x", "", "DELETE", "http://test-server:9999/test/1/alpha:x", null)]
        [NUnit.Framework.TestCaseAttribute("1", "alpha", "", "4", "DELETE", "http://test-server:9999/test/1/alpha/4", null)]
        [NUnit.Framework.TestCaseAttribute("1", "alpha", "x", "4", "DELETE", "http://test-server:9999/test/1/alpha:x/4", null)]
        public virtual void DeleteARowColummOrCell(string row, string column, string qualifier, string timestamp, string method, string url, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete a row, columm, or cell", exampleTags);
#line 117
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 118
 testRunner.Given("I have set my context to a table called \"test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 119
 testRunner.And(string.Format("I have an identifier consisting of a {0}, a {1}, a {2}, and a {3}", row, column, qualifier, timestamp), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 120
 testRunner.When("I delete an item using my identifier", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 121
 testRunner.Then(string.Format("a REST request should have been submitted with the correct {0} and {1}", method, url), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Delete a table")]
        public virtual void DeleteATable()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete a table", ((string[])(null)));
#line 130
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 131
 testRunner.Given("I have set my context to a table called \"test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 132
 testRunner.When("I delete the table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "method",
                        "url"});
            table14.AddRow(new string[] {
                        "DELETE",
                        "http://test-server:9999/test/schema"});
#line 133
 testRunner.Then("a REST request should have been submitted with the following values:", ((string)(null)), table14, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
