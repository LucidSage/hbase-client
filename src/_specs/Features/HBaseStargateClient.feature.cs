// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.18213
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace _specs.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("HBase Stargate Client")]
    public partial class HBaseStargateClientFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "HBaseStargateClient.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "HBase Stargate Client", "In order to read and write HBase data\r\nAs an application developer\r\nI want access" +
                    " to all available REST operations on HBase Stargate via a managed client API", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "server URL",
                        "content type",
                        "false row key"});
            table1.AddRow(new string[] {
                        "http://test-server:9999",
                        "text/xml",
                        "row"});
#line 7
 testRunner.Given("I have everything I need to test an HBase client in isolation, with the following" +
                    " options:", ((string)(null)), table1, "Given ");
#line 10
 testRunner.And("I have an HBase client", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Write a single value")]
        [NUnit.Framework.TestCaseAttribute("test", "1", "alpha", "", "", "PUT", "http://test-server:9999/test/1/alpha", null)]
        [NUnit.Framework.TestCaseAttribute("test", "1", "alpha", "x", "", "PUT", "http://test-server:9999/test/1/alpha:x", null)]
        [NUnit.Framework.TestCaseAttribute("test", "1", "alpha", "", "4", "PUT", "http://test-server:9999/test/1/alpha/4", null)]
        [NUnit.Framework.TestCaseAttribute("test", "1", "alpha", "x", "4", "PUT", "http://test-server:9999/test/1/alpha:x/4", null)]
        public virtual void WriteASingleValue(string table, string row, string column, string qualifier, string timestamp, string method, string url, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Write a single value", exampleTags);
#line 21
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 22
 testRunner.Given(string.Format("I have an identifier consisting of a {0}, a {1}, a {2}, a {3}, and a {4}", table, row, column, qualifier, timestamp), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 23
 testRunner.When("I write the value \"hello world\" using my identifier", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 24
 testRunner.Then(string.Format("a REST request should have been submitted with the correct {0} and {1}", method, url), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 25
 testRunner.And("the REST request should have contained 1 cell", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 26
 testRunner.And("one of the cells in the REST request should have had the value \"hello world\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Write multiple values")]
        public virtual void WriteMultipleValues()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Write multiple values", ((string[])(null)));
#line 34
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 35
 testRunner.Given("I have created a set of cells", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "table",
                        "row",
                        "column",
                        "qualifier",
                        "value"});
            table2.AddRow(new string[] {
                        "test",
                        "1",
                        "beta",
                        "x",
                        "hello world"});
#line 36
 testRunner.And("I have added a cell to my set with the following properties:", ((string)(null)), table2, "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "table",
                        "row",
                        "column",
                        "qualifier",
                        "value"});
            table3.AddRow(new string[] {
                        "test",
                        "1",
                        "beta",
                        "y",
                        "dlrow olleh"});
#line 39
 testRunner.And("I have added a cell to my set with the following properties:", ((string)(null)), table3, "And ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "table",
                        "row",
                        "column",
                        "qualifier",
                        "value"});
            table4.AddRow(new string[] {
                        "test",
                        "1",
                        "beta",
                        "z",
                        "lorum ipsum"});
#line 42
 testRunner.And("I have added a cell to my set with the following properties:", ((string)(null)), table4, "And ");
#line 45
 testRunner.When("I write the set of cells", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "method",
                        "url"});
            table5.AddRow(new string[] {
                        "POST",
                        "http://test-server:9999/test/row"});
#line 46
 testRunner.Then("a REST request should have been submitted with the following values:", ((string)(null)), table5, "Then ");
#line 49
 testRunner.And("the REST request should have contained 3 cells", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "row",
                        "column",
                        "qualifier",
                        "value"});
            table6.AddRow(new string[] {
                        "1",
                        "beta",
                        "x",
                        "hello world"});
#line 50
 testRunner.And("one of the cells in the REST request should have had the following values:", ((string)(null)), table6, "And ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "row",
                        "column",
                        "qualifier",
                        "value"});
            table7.AddRow(new string[] {
                        "1",
                        "beta",
                        "y",
                        "dlrow olleh"});
#line 53
 testRunner.And("one of the cells in the REST request should have had the following values:", ((string)(null)), table7, "And ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "row",
                        "column",
                        "qualifier",
                        "value"});
            table8.AddRow(new string[] {
                        "1",
                        "beta",
                        "z",
                        "lorum ipsum"});
#line 56
 testRunner.And("one of the cells in the REST request should have had the following values:", ((string)(null)), table8, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Read a row")]
        [NUnit.Framework.TestCaseAttribute("test", "1", "", "", "", "GET", "http://test-server:9999/test/1", null)]
        [NUnit.Framework.TestCaseAttribute("test", "1", "alpha", "", "", "GET", "http://test-server:9999/test/1/alpha", null)]
        [NUnit.Framework.TestCaseAttribute("test", "1", "alpha", "x", "", "GET", "http://test-server:9999/test/1/alpha:x", null)]
        [NUnit.Framework.TestCaseAttribute("test", "1", "alpha", "", "4", "GET", "http://test-server:9999/test/1/alpha/4", null)]
        [NUnit.Framework.TestCaseAttribute("test", "1", "alpha", "x", "4", "GET", "http://test-server:9999/test/1/alpha:x/4", null)]
        public virtual void ReadARow(string table, string row, string column, string qualifier, string timestamp, string method, string url, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Read a row", exampleTags);
#line 60
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 61
 testRunner.Given(string.Format("I have an identifier consisting of a {0}, a {1}, a {2}, a {3}, and a {4}", table, row, column, qualifier, timestamp), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 62
 testRunner.When("I read a row using my identifier", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 63
 testRunner.Then(string.Format("a REST request should have been submitted with the correct {0} and {1}", method, url), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Read a cell")]
        [NUnit.Framework.TestCaseAttribute("test", "1", "", "", "", "GET", "http://test-server:9999/test/1", null)]
        [NUnit.Framework.TestCaseAttribute("test", "1", "alpha", "", "", "GET", "http://test-server:9999/test/1/alpha", null)]
        [NUnit.Framework.TestCaseAttribute("test", "1", "alpha", "x", "", "GET", "http://test-server:9999/test/1/alpha:x", null)]
        [NUnit.Framework.TestCaseAttribute("test", "1", "alpha", "", "4", "GET", "http://test-server:9999/test/1/alpha/4", null)]
        [NUnit.Framework.TestCaseAttribute("test", "1", "alpha", "x", "4", "GET", "http://test-server:9999/test/1/alpha:x/4", null)]
        public virtual void ReadACell(string table, string row, string column, string qualifier, string timestamp, string method, string url, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Read a cell", exampleTags);
#line 72
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 73
 testRunner.Given(string.Format("I have an identifier consisting of a {0}, a {1}, a {2}, a {3}, and a {4}", table, row, column, qualifier, timestamp), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 74
 testRunner.When("I read a cell using my identifier", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 75
 testRunner.Then(string.Format("a REST request should have been submitted with the correct {0} and {1}", method, url), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Delete a row, columm, or cell")]
        [NUnit.Framework.TestCaseAttribute("test", "1", "", "", "", "DELETE", "http://test-server:9999/test/1", null)]
        [NUnit.Framework.TestCaseAttribute("test", "1", "alpha", "", "", "DELETE", "http://test-server:9999/test/1/alpha", null)]
        [NUnit.Framework.TestCaseAttribute("test", "1", "alpha", "x", "", "DELETE", "http://test-server:9999/test/1/alpha:x", null)]
        [NUnit.Framework.TestCaseAttribute("test", "1", "alpha", "", "4", "DELETE", "http://test-server:9999/test/1/alpha/4", null)]
        [NUnit.Framework.TestCaseAttribute("test", "1", "alpha", "x", "4", "DELETE", "http://test-server:9999/test/1/alpha:x/4", null)]
        public virtual void DeleteARowColummOrCell(string table, string row, string column, string qualifier, string timestamp, string method, string url, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete a row, columm, or cell", exampleTags);
#line 114
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 115
 testRunner.And(string.Format("I have an identifier consisting of a {0}, a {1}, a {2}, a {3}, and a {4}", table, row, column, qualifier, timestamp), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 116
 testRunner.When("I delete an item using my identifier", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 117
 testRunner.Then(string.Format("a REST request should have been submitted with the correct {0} and {1}", method, url), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
